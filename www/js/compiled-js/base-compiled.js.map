{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\n * Created by UTOPIA SOFTWARE on 26/7/2018.\n */\n\n/**\n * file provides the \"base\" framework/utilities required to launch the app.\n * E.g. - File creates the base namespace which the app is built on.\n * - Loads all the ES moddule libraries required etc\n *\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\n * also used interchangeably\n **/\n\n\n/**\n * prepare/config the dynamic loader for all the necessary ES Modules\nSystemJS.config({\n    baseURL: 'js',\n    paths: {\n        \"ej2-modules\": \"ej2-components-16.2.48\" // path is for the base folder that contains all EJ2 COMPONENT MODULES\n    },\n    map: {\n    }\n});\n** END OF SYSTEMJS CONFIG **/\n\n\n// constant that defines the app namespace\nconst utopiasoftware_app_namespace = 'edpms';\n\n/**\n * create the namespace and base methods and properties for the app\n * @type {{}}\n */\nconst utopiasoftware = {\n    [utopiasoftware_app_namespace]: {\n\n        /**\n         * object is responsible for handling operations on the app's cached data\n         */\n        appCachedData: {\n\n            /**\n             * method is used to download the project data to be cached. This includes project data and milestones data\n             * @param showProgressModal {Boolean}\n             * @returns {Promise<void>}\n             */\n            async loadProjectData(showProgressModal = true){\n\n                // check if Internet Connection is available before proceeding\n                if(navigator.connection.type === Connection.NONE){ // no Internet Connection\n                    // inform the user that they cannot proceed without Internet\n                    window.plugins.toast.showWithOptions({\n                        message: \"You cannot download offline data without an Internet Connection\",\n                        duration: 4000,\n                        position: \"top\",\n                        styling: {\n                            opacity: 1,\n                            backgroundColor: '#ff0000', //red\n                            textColor: '#FFFFFF',\n                            textSize: 14\n                        }\n                    }, function(toastEvent){\n                        if(toastEvent && toastEvent.event == \"touch\"){ // user tapped the toast, so hide toast immediately\n                            window.plugins.toast.hide();\n                        }\n                    });\n                    throw \"no internet connection\";\n                }\n\n                try{\n                    // keep device awake during the downloading process\n                    window.plugins.insomnia.keepAwake();\n\n                    if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                        // show download progress\n                        $('#determinate-progress-modal .modal-message').html('Downloading projects data for offline use...');\n                        $('#determinate-progress-modal').get(0).show();\n                        $('#determinate-progress-modal #determinate-progress').get(0).value = 30;\n                    }\n\n                    // get the projects data to be cached\n                    let serverResponse = await Promise.resolve($.ajax(\n                        {\n                            url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/loadprojects.php\",\n                            type: \"post\",\n                            contentType: \"application/x-www-form-urlencoded\",\n                            beforeSend: function(jqxhr) {\n                                jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                            },\n                            dataType: \"text\",\n                            timeout: 240000, // wait for 4 minutes before timeout of request\n                            processData: true,\n                            data: {}\n                        }\n                    ));\n\n                    serverResponse = JSON.parse(serverResponse); // convert the response to JSON object\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 35;\n\n                    // delete all previous project data/docs\n                    let allProjects = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"projects\"\n                            }},\n                        fields: [\"_id\", \"_rev\", \"PROJECTID\", \"TITLE\", \"CONTRACTSUM\", \"CONTRACTOR\", \"CONTRACTORID\", \"MDAID\", \"TYPE\"],\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    // get all the returned projects and delete them\n                    allProjects = allProjects.docs.map((currentValue, index, array) => {\n                        currentValue._deleted = true; // mark the document as deleted\n                        return currentValue;\n                    });\n\n                    // check if there are any project data to delete\n                    if(allProjects.length > 0){\n                        // delete the already saved projects\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(allProjects);\n                    }\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 45;\n\n                    // store all the project data received\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(serverResponse);\n                    // inform the user that milestone data is being downloaded for offline use\n                    $('#determinate-progress-modal .modal-message').html('Downloading milestones data for offline use...');\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 50;\n\n                    // get the milestones data to be cached\n                    serverResponse = await Promise.resolve($.ajax(\n                        {\n                            url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/loadboq.php\",\n                            type: \"post\",\n                            contentType: \"application/x-www-form-urlencoded\",\n                            beforeSend: function(jqxhr) {\n                                jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                            },\n                            dataType: \"text\",\n                            timeout: 240000, // wait for 4 minutes before timeout of request\n                            processData: true,\n                            data: {}\n                        }\n                    ));\n\n                    serverResponse = JSON.parse(serverResponse); // convert the response to JSON object\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 65;\n\n                    // delete all previous milestones /docs\n                    allProjects = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"BOQ\"\n                            }},\n                        fields: [\"_id\", \"_rev\", \"CATEGORY\", \"AMOUNT\", \"RATE\", \"PROJECTID\", \"DDATE\", \"BOQID\", \"TYPE\"],\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    // get all the returned milestones and delete them\n                    allProjects = allProjects.docs.map((currentValue, index, array) => {\n                        currentValue._deleted = true; // mark the document as deleted\n                        return currentValue;\n                    });\n\n                    // check if there are any milestone data to delete\n                    if(allProjects.length > 0){\n                        // delete the already saved milestone data\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(allProjects);\n                    }\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 80;\n\n                    // store the all the milestone data received\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(serverResponse);\n\n                    // inform the user that approved evaluation data is being downloaded for offline use\n                    $('#determinate-progress-modal .modal-message').html('Downloading approved evaluation data for offline use...');\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 85;\n\n                    // get previously uploaded and approved project evaluation reports\n                    serverResponse = await Promise.resolve($.ajax(\n                        {\n                            url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/load-current-evaluations.php\",\n                            type: \"post\",\n                            contentType: \"application/x-www-form-urlencoded\",\n                            beforeSend: function(jqxhr) {\n                                jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                            },\n                            dataType: \"text\",\n                            timeout: 240000, // wait for 4 minutes before timeout of request\n                            processData: true,\n                            data: {}\n                        }\n                    ));\n\n                    serverResponse = JSON.parse(serverResponse); // convert the response to JSON object\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 90;\n\n                    // delete all previously stored/cached approved project evaluation reports\n                    allProjects = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"project evaluations\"\n                            }},\n                        use_index: [\"ptracker-index-designdoc\", \"DOC_TYPE_INDEX\"]\n                    });\n\n                    // get all the returned approved evaluation report and delete them\n                    allProjects = allProjects.docs.map((currentValue, index, array) => {\n                        currentValue._deleted = true; // mark the document as deleted\n                        return currentValue;\n                    });\n\n                    // check if there are any approved evaluation report to delete\n                    if(allProjects.length > 0){\n                        // delete the previously saved/cached approved evaluation report\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(allProjects);\n                    }\n\n                    // format the retrieved evaluation report before storing in the app database\n                    serverResponse = serverResponse.map((currentValue, index, array) => {\n                        // format/convert the EVALUATIONS field to proper json\n                        currentValue.EVALUATIONS = JSON.parse(currentValue.EVALUATIONS);\n                        return currentValue;\n                    });\n\n                    $('#determinate-progress-modal #determinate-progress').get(0).value = 100;\n\n                    // store the all the milestone data received\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.bulkDocs(serverResponse);\n\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                }\n                finally {\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                    window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                }\n            }\n        },\n\n\n        /**\n         * object is responsible for handling operations on the project evaluation report sheet data\n         */\n        projectEvaluationReportData: {\n\n            /**\n             * method is used to upload all project evaluation report data/sheets to the server.\n             * during the process of upload, all successfully uploaded report data will be deleted\n             * from the user's device.\n             *\n             * @param showProgressModal\n             * @returns {Promise<Number>} resolves with a Promise containing\n             * the number of report sheets that were successfully uploaded OR rejects with an error object\n             */\n            async uploadProjectEvaluationReports(showProgressModal = true){\n\n                // check if Internet Connection is available before proceeding\n                if(navigator.connection.type === Connection.NONE){ // no Internet Connection\n                    // inform the user that they cannot proceed without Internet\n                    window.plugins.toast.showWithOptions({\n                        message: \"You cannot upload evaluation reports without an Internet Connection\",\n                        duration: 4000,\n                        position: \"top\",\n                        styling: {\n                            opacity: 1,\n                            backgroundColor: '#ff0000', //red\n                            textColor: '#FFFFFF',\n                            textSize: 14\n                        }\n                    }, function(toastEvent){\n                        if(toastEvent && toastEvent.event == \"touch\"){ // user tapped the toast, so hide toast immediately\n                            window.plugins.toast.hide();\n                        }\n                    });\n                    throw \"no internet connection\";\n                }\n\n                var totalReportSheets = 0; // holds the total number of report sheets to be uploaded\n\n                try{\n                    // keep device awake during the downloading process\n                    window.plugins.insomnia.keepAwake();\n\n                    if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                        // show download progress\n                        $('#determinate-progress-modal .modal-message').html('Prepping Evaluation Report for Upload...');\n                        $('#determinate-progress-modal').get(0).show();\n                        $('#determinate-progress-modal #determinate-progress').get(0).value = 1;\n                    }\n\n                    // get all the save project report sheets evaluated by the current signed in user from the app database\n                    let reportSheets = await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.find({\n                        selector: {\n                            \"TYPE\": {\n                                \"$eq\": \"saved report\"\n                            },\n                            \"evaluatedBy\": {\n                                \"$eq\": utopiasoftware[utopiasoftware_app_namespace].model.userDetails.userDetails.username\n                            }\n                        },\n                        fields: [\"TYPE\", \"evaluatedBy\", \"_id\", \"_rev\"],\n                        use_index: [\"ptracker-index-designdoc\", \"FIND_SAVED_REPORT_BY_EVALUATED_BY\"]\n                    });\n\n                    if(reportSheets.docs.length === 0){ // there are no report sheets to upload\n                        if(showProgressModal === true){\n                            // hide the progress loader\n                            await $('#determinate-progress-modal').get(0).hide();\n                        }\n                        window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                        return 0;\n                    }\n\n                    reportSheets = reportSheets.docs; // reassign the report sheets array\n                    totalReportSheets = reportSheets.length; // update the number of report sheets to be sent\n\n                    // upload each of the report sheets one at a time\n                    for(let index = 0; index < reportSheets.length; index = 0){\n\n                        if(showProgressModal === true){ // check if download progress modal should be displayed to user\n                            // show download progress\n                            $('#determinate-progress-modal .modal-message').\n                            html(`Uploading Evaluation Report ${totalReportSheets - (reportSheets.length - 1)} Of ${totalReportSheets}. Please Wait...`);\n                            $('#determinate-progress-modal #determinate-progress').get(0).value =\n                                Math.round(((totalReportSheets - (reportSheets.length - 1)) / totalReportSheets) * 100);\n                        }\n                        // create the FormData object to be used in sending the report sheet\n                        let formData = new FormData();\n                        // attach the evaluation report data to the FormData\n                        formData.set(\"reportData\", JSON.stringify(await utopiasoftware[utopiasoftware_app_namespace].model.\n                            appDatabase.get(reportSheets[index]._id)));\n                        // attach the blob for the evaluation pictures 1 - 3 to the FormData\n                        formData.set(\"evaluation-pic-1\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                            getAttachment(reportSheets[index]._id, \"picture1.jpg\"));\n                        formData.set(\"evaluation-pic-2\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        getAttachment(reportSheets[index]._id, \"picture2.jpg\"));\n                        formData.set(\"evaluation-pic-3\", await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        getAttachment(reportSheets[index]._id, \"picture3.jpg\"));\n\n                        // send the FormData to the server\n                        let serverResponse = await Promise.resolve($.ajax(\n                            {\n                                url: utopiasoftware[utopiasoftware_app_namespace].model.appBaseUrl + \"/mobile/reports-upload.php\",\n                                //url: \"reports-upload.json\",\n                                type: \"post\",\n                                contentType: false,\n                                beforeSend: function(jqxhr) {\n                                    jqxhr.setRequestHeader(\"X-PTRACKER-APP\", \"mobile\");\n                                },\n                                dataType: \"text\",\n                                timeout: 240000, // wait for 4 minutes before timeout of request\n                                processData: false,\n                                data: formData\n                            }\n                        ));\n\n                        serverResponse = JSON.parse(serverResponse.trim());\n\n                        if(serverResponse.status !== \"success\"){ // the evaluation report could not be saved by the server\n                            throw serverResponse; // throw error and END upload process\n                        }\n\n                        // since server upload of the evaluation report was successful, remove the evaluation report from app database\n                        await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                        remove(reportSheets[index]._id, reportSheets[index]._rev);\n                        // also remove the evaluation report from the reportSheets array\n                        reportSheets.shift();\n                    }\n\n                    // compact the database\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.compact();\n                    // cleanup unused/stale database views/queries\n                    await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.viewCleanup();\n                    return totalReportSheets; // return the total number of report sheet uploaded\n                }\n                finally {\n                    if(showProgressModal === true){\n                        // hide the progress loader\n                        await $('#determinate-progress-modal').get(0).hide();\n                    }\n                    window.plugins.insomnia.allowSleepAgain(); // the device can go to sleep now\n                }\n            },\n\n            /**\n             * method is used to return a collection of saved evaluation reports from the app database\n             *\n             * @param include_docs\n             * @param limit\n             * @param skip\n             * @param descending\n             * @param startDateStamp\n             * @param endDateStamp\n             * @returns {Promise<*>}\n             */\n            async loadProjectEvaluationReports(include_docs = false, limit = 10, skip = 0,\n                                               descending = false, startDateStamp, endDateStamp){\n\n                try{\n\n                    // search the app database for saved reports evaluated by currently logged in user\n                    return await utopiasoftware[utopiasoftware_app_namespace].model.appDatabase.\n                    query(\"saved_reports_view/get_report_evaluated_by\", {\n                        include_docs: include_docs,\n                        limit: limit,\n                        skip: skip,\n                        descending: descending,\n                        startkey: [\"saved report\",\n                            utopiasoftware[utopiasoftware_app_namespace].model.userDetails.userDetails.username, startDateStamp],\n                        endkey: [\"saved report\",\n                            utopiasoftware[utopiasoftware_app_namespace].model.userDetails.userDetails.username, endDateStamp]\n                    });\n                }\n                finally {\n\n                }\n            }\n        },\n\n        utilities: {\n\n            async updateBulkDocsInBatches(batchSize = 500, docsArray = [], appDatabase){\n                var batchCycle; // holds the number of update batch cycles to run\n\n                if(docsArray.length === 0){ // no docs to update\n                    return true; // no batch update to perform\n                }\n\n                batchCycle = Math.ceil((docsArray.length / batchSize));\n\n                for(let cycleIndex = 0; cycleIndex < batchCycle; cycleIndex++){\n                    // get the batched docs to update in the app database\n                    let batchedArray = docsArray.slice((cycleIndex * batchSize), ((cycleIndex + 1) * batchSize));\n                    // update the database with the batched docs\n                    await appDatabase.bulkDocs(batchedArray);\n                }\n\n                return true; // batch update completed successfully\n            }\n        }\n    }\n};\n"]}